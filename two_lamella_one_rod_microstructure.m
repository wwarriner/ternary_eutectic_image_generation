% Copyright 2017 William Warriner
% 
% Licensed under the Apache License, Version 2.0 (the "License");
% you may not use this file except in compliance with the License.
% You may obtain a copy of the License at
% 
%     http://www.apache.org/licenses/LICENSE-2.0
% 
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS,
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
% See the License for the specific language governing permissions and
% limitations under the License.

function microstructure = two_lamella_one_rod_microstructure( ...
    microstructure_x_length_px, ...
    microstructure_y_length_px, ...
    lamella_spacing_px, ...
    volume_fraction_alpha_phase, ...
    volume_fraction_beta_phase, ...
    alpha_value, ...
    beta_value, ...
    gamma_value, ...
    scaling, ...
    rotation, ...
    translation ...
    )

ra = radius_of_alpha_phase( ...
    volume_fraction_alpha_phase, ...
    lamella_spacing_px ...
    );

tb = width_of_beta_phase( ...
    ra, ...
    volume_fraction_beta_phase, ...
    lamella_spacing_px ...
    );

unit_cell = generate_unit_cell( ...
    ra, ...
    tb, ...
    lamella_spacing_px, ...
    alpha_value, ...
    beta_value, ...
    gamma_value ...
    );

microstructure = generate_microstructure( ...
    unit_cell, ...
    microstructure_x_length_px, ...
    microstructure_y_length_px, ...
    scaling, ...
    rotation, ...
    translation ...
    );

end



function ra = radius_of_alpha_phase( va, rod_spacing )

vt = compute_total_unit_cell_volume( rod_spacing );
ra = sqrt( ...
    ( va * vt ) ...
    / ( 2 * pi ) ...
    );

end



function tb = width_of_beta_phase( ra, vb, rod_spacing )

vt = compute_total_unit_cell_volume( rod_spacing );
row_spacing = compute_row_spacing( rod_spacing );
tb = ( ...
    ( ( vb * vt ) + ( pi * ( ra ^ 2 ) ) ) ...
    / ( 2 * row_spacing ) ...
    );

end



function unit_cell = generate_unit_cell( ...
    ra, ...
    tb, ...
    rod_spacing, ...
    alpha_value, ...
    beta_value, ...
    gamma_value ...
    )

ra = max( 1, round( ra ) );
tb = max( 1, round( tb ) );

height = round( 2 * compute_row_spacing( rod_spacing ) );

unit_cell = create_array_by_fill( gamma_value, height, rod_spacing );
unit_cell = fill_beta_phase( tb, beta_value, unit_cell );
unit_cell = fill_alpha_phase( ra, tb, rod_spacing, alpha_value, unit_cell );

end



function unit_cell = fill_beta_phase( tb, beta_value, unit_cell )

unit_cell( :, 1 : tb ) = beta_value;

end



function unit_cell = fill_alpha_phase( ...
    ra, ...
    tb, ...
    rod_spacing, ...
    alpha_value, ...
    unit_cell ...
    )

unit_cell = circshift( unit_cell, ra, 2 );
row_spacing = round( compute_row_spacing( rod_spacing ) );
da = 2 * ra;
ball = draw_ball( da );
rod = zeros( size( unit_cell ) );
rod( 1 : da, 1 : da ) = ball;
unit_cell( rod == 1 ) = alpha_value;
rod = circshift( rod, tb, 2 );
rod = circshift( rod, round( row_spacing ), 1 );
unit_cell( rod == 1 ) = alpha_value;

unit_cell = circshift( unit_cell, -ra, 2 );
unit_cell = circshift( unit_cell, -ra, 1 );

end



function vt = compute_total_unit_cell_volume( rod_spacing )

vt = 2 * rod_spacing * compute_row_spacing( rod_spacing );

end



function row_spacing = compute_row_spacing( rod_spacing )

row_spacing = ( sqrt( 3 ) / 2 ) * rod_spacing;

end